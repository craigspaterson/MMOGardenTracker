{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-bootstrap/app-bootstrap.module.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/crops/crop-detail.component.css","webpack:///./src/app/crops/crop-detail.component.html","webpack:///./src/app/crops/crop-detail.component.ts","webpack:///./src/app/crops/crop.service.ts","webpack:///./src/app/crops/crop.ts","webpack:///./src/app/crops/crops.component.css","webpack:///./src/app/crops/crops.component.html","webpack:///./src/app/crops/crops.component.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/gardens/garden-detail.component.css","webpack:///./src/app/gardens/garden-detail.component.html","webpack:///./src/app/gardens/garden-detail.component.ts","webpack:///./src/app/gardens/garden.service.ts","webpack:///./src/app/gardens/gardens.component.css","webpack:///./src/app/gardens/gardens.component.html","webpack:///./src/app/gardens/gardens.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\r\n\r\n// Add BootStrap modules as needed\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BsDropdownModule.forRoot(),\r\n    TooltipModule.forRoot(),\r\n    ModalModule.forRoot(),\r\n    BsDatepickerModule.forRoot()\r\n  ],\r\n\r\n  exports: [BsDropdownModule, TooltipModule, ModalModule, BsDatepickerModule],\r\n  declarations: []\r\n})\r\nexport class AppBootstrapModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { GardensComponent } from './gardens/gardens.component';\r\nimport { GardenDetailComponent } from './gardens/garden-detail.component';\r\nimport { CropsComponent } from './crops/crops.component';\r\nimport { CropDetailComponent } from './crops/crop-detail.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\r\n  { path: 'dashboard', component: DashboardComponent },\r\n  { path: 'gardens', component: GardensComponent },\r\n  { path: 'gardens/garden/:id', component: GardenDetailComponent },\r\n  { path: 'crops', component: CropsComponent },\r\n  { path: 'crops/crop/:id', component: CropDetailComponent },\r\n  { path: 'crops/crop/new', component: CropDetailComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"jumbotron jumbotron-fluid\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <h1 class=\\\"display-4\\\">{{title}}</h1>\\r\\n    <p class=\\\"lead\\\">Track all of your gardens, crops, and activities with {{title}}.</p>\\r\\n  </div>\\r\\n</div>\\r\\n<nav class=\\\"navbar navbar-expand-lg navbar-dark bg-dark\\\">\\r\\n  <a class=\\\"navbar-brand\\\" href=\\\"#\\\">\\r\\n    <fa-icon [icon]=\\\"faLeaf\\\" style=\\\"color:lime\\\"></fa-icon> </a>\\r\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarNavAltMarkup\\\" aria-controls=\\\"navbarNavAltMarkup\\\"\\r\\n    aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n  </button>\\r\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarNavAltMarkup\\\">\\r\\n    <div class=\\\"navbar-nav\\\">\\r\\n      <a class=\\\"nav-item nav-link active\\\" routerLink=\\\"/dashboard\\\">Dashboard\\r\\n        <span class=\\\"sr-only\\\">(current)</span>\\r\\n      </a>\\r\\n      <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/gardens\\\">Gardens</a>\\r\\n      <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/crops\\\">Crops</a>\\r\\n    </div>\\r\\n  </div>\\r\\n</nav>\\r\\n\\r\\n<!-- <div style=\\\"text-align:center\\\">\\r\\n  <fa-icon [icon]=\\\"faCoffee\\\"></fa-icon>\\r\\n</div> -->\\r\\n\\r\\n<div class=\\\"container-fluid\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-1\\\"></div>\\r\\n    <div class=\\\"col-11\\\">\\r\\n      <router-outlet></router-outlet>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","import { Component } from '@angular/core';\r\n\r\nimport { faCoffee, faLeaf, faEdit } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Garden Tracker';\r\n  faCoffee = faCoffee;\r\n  faLeaf = faLeaf;\r\n  faEdit = faEdit;\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AppBootstrapModule } from './app-bootstrap/app-bootstrap.module';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { CropsComponent } from './crops/crops.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\n\r\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\r\nimport { InMemoryDataService } from './in-memory-data.service';\r\n\r\nimport { environment } from '../environments/environment';\r\nimport { GardensComponent } from './gardens/gardens.component';\r\nimport { CropDetailComponent } from './crops/crop-detail.component';\r\nimport { GardenDetailComponent } from './gardens/garden-detail.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    CropsComponent,\r\n    DashboardComponent,\r\n    GardensComponent,\r\n    CropDetailComponent,\r\n    GardenDetailComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    AppRoutingModule,\r\n    AppBootstrapModule,\r\n    FontAwesomeModule,\r\n\r\n    /*\r\n    // The HttpClientInMemoryWebApiModule module intercepts HTTP requests\r\n    // and returns simulated server responses.\r\n    // Remove it when a real server is ready to receive requests.\r\n    environment.production\r\n      ? []\r\n      : HttpClientInMemoryWebApiModule.forRoot(InMemoryDataService, {\r\n          dataEncapsulation: false\r\n        })\r\n    */\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-md-8\\\">\\r\\n    <!-- <div *ngIf=\\\"crop as crop; else loading\\\"> -->\\r\\n    <form #f=\\\"ngForm\\\" (ngSubmit)=\\\"saveCrop(f.value)\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"gardenId\\\">Garden</label>\\r\\n        <select id=\\\"gardenId\\\" name=\\\"gardenId\\\" #gardenId=\\\"ngModel\\\" [(ngModel)]=\\\"crop.gardenId\\\">\\r\\n          <option value=\\\"\\\"></option>\\r\\n          <option *ngFor=\\\"let garden of gardens\\\" [value]=\\\"garden.gardenId\\\">\\r\\n            {{garden.gardenName}}\\r\\n          </option>\\r\\n        </select>\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"cropId\\\">Crop Id</label>\\r\\n        <input id=\\\"cropId\\\" name=\\\"cropId\\\" type=\\\"text\\\" class=\\\"form-control\\\" #cropId=\\\"ngModel\\\" [(ngModel)]=\\\"crop.cropId\\\" placeholder=\\\"Crop Id\\\"\\r\\n          readonly>\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"cropName\\\">Crop Name</label>\\r\\n        <input id=\\\"cropName\\\" name=\\\"cropName\\\" type=\\\"text\\\" class=\\\"form-control\\\" #cropName=\\\"ngModel\\\" [(ngModel)]=\\\"crop.cropName\\\" placeholder=\\\"Crop Name\\\"\\r\\n          required>\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"plantName\\\">Plant Name</label>\\r\\n        <input id=\\\"plantName\\\" name=\\\"plantName\\\" type=\\\"text\\\" class=\\\"form-control\\\" #plantName=\\\"ngModel\\\" [(ngModel)]=\\\"crop.plantName\\\"\\r\\n          placeholder=\\\"Plant Name\\\" required>\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"beginDate\\\">Begin Date</label>\\r\\n        <input id=\\\"beginDate\\\" name=\\\"beginDate\\\" type=\\\"text\\\" placeholder=\\\"Datepicker\\\" class=\\\"form-control\\\" #beginDate=\\\"ngModel\\\" [(ngModel)]=\\\"crop.beginDate\\\"\\r\\n          bsDatepicker required>\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"endDate\\\">End Date</label>\\r\\n        <input id=\\\"endDate\\\" name=\\\"endDate\\\" type=\\\"text\\\" placeholder=\\\"Datepicker\\\" class=\\\"form-control\\\" #endDate=\\\"ngModel\\\" [(ngModel)]=\\\"crop.endDate\\\"\\r\\n          bsDatepicker>\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"notes\\\">Notes</label>\\r\\n        <input id=\\\"notes\\\" name=\\\"notes\\\" type=\\\"text\\\" class=\\\"form-control\\\" #notes=\\\"ngModel\\\" [(ngModel)]=\\\"crop.notes\\\">\\r\\n      </div>\\r\\n\\r\\n      <!-- cropActivities: CropActivity[]; -->\\r\\n      <button class=\\\"btn btn-primary\\\" id=\\\"submit\\\" name=\\\"submit\\\" type=\\\"submit\\\" value=\\\"Submit\\\">Submit</button>&nbsp;\\r\\n      <button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"gotoCrops()\\\">Back</button>\\r\\n\\r\\n    </form>\\r\\n    <!-- </div> -->\\r\\n\\r\\n    <ng-template #loading>\\r\\n      Loading...\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { CropService } from './crop.service';\r\nimport { GardenService } from '../gardens/garden.service';\r\nimport { Crop } from './crop';\r\nimport { Garden } from '../gardens/garden';\r\n\r\n@Component({\r\n  selector: 'app-crop-detail',\r\n  templateUrl: './crop-detail.component.html',\r\n  styleUrls: ['./crop-detail.component.css']\r\n})\r\nexport class CropDetailComponent implements OnInit {\r\n  public errorMessage: string;\r\n  public crop: Crop;\r\n  public gardens: Garden[];\r\n  cropId: number;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private cropService: CropService,\r\n    private gardenService: GardenService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.cropId = +this.route.snapshot.paramMap.get('id');\r\n\r\n    this.getGardens();\r\n\r\n    if (this.cropId) {\r\n      this.getCrop(this.cropId);\r\n    } else {\r\n      this.crop = new Crop();\r\n    }\r\n  }\r\n\r\n  private getGardens(): void {\r\n    this.gardenService\r\n      .getGardens()\r\n      .subscribe(\r\n        response => (this.gardens = response),\r\n        error => (this.errorMessage = <any>error)\r\n      );\r\n  }\r\n\r\n  private getCrop(cropId: number): void {\r\n    this.cropService\r\n      .getCropByCropId(cropId)\r\n      .subscribe(\r\n        response => (this.crop = response),\r\n        error => (this.errorMessage = <any>error)\r\n      );\r\n  }\r\n\r\n  private addCrop(crop: Crop): void {\r\n    this.cropService\r\n      .postCrop(crop)\r\n      .subscribe(\r\n        response => (this.crop = response),\r\n        error => (this.errorMessage = <any>error)\r\n      );\r\n  }\r\n\r\n  private updateCrop(cropId: number, crop: Crop): void {\r\n    this.cropService\r\n      .putCrop(cropId, crop)\r\n      .subscribe(\r\n        response => (this.crop = response),\r\n        error => (this.errorMessage = <any>error)\r\n      );\r\n  }\r\n\r\n  public saveCrop(crop: Crop): void {\r\n    // console.log(crop);\r\n\r\n    if (crop) {\r\n      // TODO: Remove after replacing in memory db\r\n      // crop.cropId = crop.cropId;\r\n    }\r\n\r\n    if (this.cropId) {\r\n      this.updateCrop(this.cropId, crop);\r\n    } else {\r\n      this.addCrop(crop);\r\n    }\r\n\r\n    this.router.navigate([`/crops`]);\r\n  }\r\n\r\n  gotoCrops(): void {\r\n    this.router.navigate([`/crops`]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpParams,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nimport { Crop } from './crop';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n  params: new HttpParams({})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CropService {\r\n  // private url = 'api/crops';\r\n  private url: string = environment.gardenTrackerServiceUrl + 'api/crops';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getCrops(): Observable<Crop[]> {\r\n    return this.http\r\n      .get<Crop[]>(this.url, httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getCropByCropId(cropId: number): Observable<Crop> {\r\n    return this.http\r\n      .get<Crop>(this.url + `/${cropId}`, httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  postCrop(crop: Crop): Observable<Crop> {\r\n    return this.http\r\n      .post<Crop>(this.url, crop, httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  putCrop(cropId: number, crop: Crop): Observable<Crop> {\r\n    return this.http\r\n      .put<Crop>(this.url + `/${cropId}`, crop, httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  deleteCrop(cropId: number): Observable<{}> {\r\n    return this.http\r\n      .delete(this.url + `/${cropId}`, httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` + `body was: ${error.error}`\r\n      );\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError('Something bad happened; please try again later.');\r\n  }\r\n}\r\n","import { CropActivity } from './crop-activity';\r\n\r\nexport class Crop {\r\n  // id: number;\r\n  gardenId: number;\r\n  cropId: number;\r\n  cropName: string;\r\n  plantName: string;\r\n  beginDate: Date;\r\n  endDate?: Date;\r\n  notes: string;\r\n  cropActivities: CropActivity[];\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-md-8\\\">\\r\\n    <p>\\r\\n      <a routerLink=\\\"/crops/crop/new\\\" class=\\\"btn btn-primary\\\">Add Crop</a>\\r\\n    </p>\\r\\n\\r\\n    <ng-container *ngIf=\\\"crops && crops.length; then hasDataTemplate; else noDataTemplate\\\">\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-template #hasDataTemplate>\\r\\n      <div>\\r\\n        <table class=\\\"table table-bordered thread-dark\\\">\\r\\n          <thead>\\r\\n            <tr>\\r\\n              <th>Action</th>\\r\\n              <th>Crop Name</th>\\r\\n              <th>Plant Name</th>\\r\\n              <th>Begin Date</th>\\r\\n              <th>End Date</th>\\r\\n            </tr>\\r\\n          </thead>\\r\\n          <tr *ngFor=\\\"let crop of crops; let loopIndex = index\\\">\\r\\n            <td style=\\\"text-align:top; padding:0; margin:0; cursor:pointer; width: 80px;\\\">\\r\\n              <fa-icon [icon]=\\\"faEdit\\\" style=\\\"color:black\\\" (click)=\\\"onEditClick(crop.cropId)\\\"></fa-icon>&nbsp;\\r\\n              <fa-icon [icon]=\\\"faEraser\\\" style=\\\"color:black\\\" (click)=\\\"onDeleteClick(crop.cropId)\\\"></fa-icon>&nbsp;\\r\\n              <!-- <fa-icon [icon]=\\\"faSortUp\\\" style=\\\"color:black\\\" (click)=\\\"onAscendingSortClick(crop.cropId)\\\"></fa-icon>&nbsp; -->\\r\\n              <!-- <fa-icon [icon]=\\\"faSortDown\\\" style=\\\"color:black\\\" (click)=\\\"onDescendingSortClick(crop.cropId)\\\"></fa-icon> -->\\r\\n            </td>\\r\\n            <td>\\r\\n              {{crop.cropName}}\\r\\n            </td>\\r\\n            <td>\\r\\n              {{crop.plantName}}\\r\\n            </td>\\r\\n            <td>\\r\\n              {{crop.beginDate | date:'shortDate'}}\\r\\n            </td>\\r\\n            <td>\\r\\n              {{crop.endDate | date:'shortDate'}}\\r\\n            </td>\\r\\n          </tr>\\r\\n        </table>\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n    <ng-template #noDataTemplate>\\r\\n      <div>\\r\\n        Loading...\\r\\n      </div>\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs/internal/Subscription';\r\n\r\nimport { CropService } from './crop.service';\r\nimport { Crop } from './crop';\r\n\r\nimport {\r\n  faEdit,\r\n  faEraser,\r\n  faSortUp,\r\n  faSortDown\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n  selector: 'app-crops',\r\n  templateUrl: './crops.component.html',\r\n  styleUrls: ['./crops.component.css']\r\n})\r\nexport class CropsComponent implements OnInit, OnDestroy {\r\n  public errorMessage: string;\r\n  public crops: Crop[];\r\n\r\n  faEdit = faEdit;\r\n  faEraser = faEraser;\r\n  faSortUp = faSortUp;\r\n  faSortDown = faSortDown;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private cropService: CropService\r\n  ) {}\r\n\r\n  private cropsSubscription: Subscription;\r\n\r\n  ngOnInit() {\r\n    this.getCrops();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.cropsSubscription.unsubscribe();\r\n  }\r\n\r\n  getCrops(): void {\r\n    this.cropsSubscription = this.cropService\r\n      .getCrops()\r\n      .subscribe(\r\n        response => (this.crops = response),\r\n        error => (this.errorMessage = <any>error)\r\n      );\r\n  }\r\n\r\n  onEditClick(cropId: number): void {\r\n    this.router.navigate([`/crops/crop/${cropId}`]);\r\n  }\r\n\r\n  onDeleteClick(cropId: number): void {}\r\n\r\n  onAscendingSortClick(cropId: number): void {}\r\n\r\n  onDescendingSortClick(cropId: number): void {}\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-8\\\">\\r\\n        <h2>Dashboard</h2>\\r\\n    </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-md-8\\\">\\r\\n    <div *ngIf=\\\"garden as garden; else loading\\\">\\r\\n      <div>\\r\\n        <span>Garden Id: </span>{{garden.gardenId}}</div>\\r\\n      <div>\\r\\n        <label>Garden Name:\\r\\n          <input [(ngModel)]=\\\"garden.gardenName\\\" placeholder=\\\"Garden Name\\\">\\r\\n        </label>\\r\\n      </div>\\r\\n      <p>\\r\\n        <button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"gotoGardens()\\\">Back</button>\\r\\n      </p>\\r\\n    </div>\\r\\n\\r\\n    <ng-template #loading>\\r\\n      Loading...\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { GardenService } from './garden.service';\r\nimport { Garden } from './garden';\r\n\r\n@Component({\r\n  selector: 'app-garden-detail',\r\n  templateUrl: './garden-detail.component.html',\r\n  styleUrls: ['./garden-detail.component.css']\r\n})\r\nexport class GardenDetailComponent implements OnInit {\r\n  public errorMessage: string;\r\n  public garden: Garden;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private gardenService: GardenService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const gardenId = +this.route.snapshot.paramMap.get('id');\r\n\r\n    this.getGarden(gardenId);\r\n  }\r\n\r\n  private getGarden(gardenId: number): void {\r\n    this.gardenService\r\n      .getGardenByGardenId(gardenId)\r\n      .subscribe(\r\n        response => (this.garden = response),\r\n        error => (this.errorMessage = <any>error)\r\n      );\r\n  }\r\n\r\n  gotoGardens(): void {\r\n    this.router.navigate([`/gardens`]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nimport { Garden } from './garden';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GardenService {\r\n  // private url = 'api/gardens';\r\n  private url: string = environment.gardenTrackerServiceUrl + 'api/gardens';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getGardens(): Observable<Garden[]> {\r\n    return this.http\r\n      .get<Garden[]>(this.url, httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getGardenByGardenId(gardenId: number): Observable<Garden> {\r\n    return this.http\r\n      .get<Garden>(this.url + `/${gardenId}`, httpOptions)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` + `body was: ${error.error}`\r\n      );\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError('Something bad happened; please try again later.');\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-md-8\\\">\\r\\n    <ng-container *ngIf=\\\"gardens && gardens.length; then hasDataTemplate; else noDataTemplate\\\">\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-template #hasDataTemplate>\\r\\n      <div>\\r\\n        <table class=\\\"table table-bordered thread-dark\\\">\\r\\n          <thead>\\r\\n            <tr>\\r\\n              <th>Action</th>\\r\\n              <th>Garden Name</th>\\r\\n            </tr>\\r\\n          </thead>\\r\\n          <tr *ngFor=\\\"let garden of gardens; let loopIndex = index\\\">\\r\\n            <td style=\\\"text-align:top; padding:0; margin:0; cursor:pointer; width: 80px;\\\">\\r\\n              <fa-icon [icon]=\\\"faEdit\\\" style=\\\"color:black\\\" (click)=\\\"onEditClick(garden.gardenId)\\\"></fa-icon>&nbsp;\\r\\n              <fa-icon [icon]=\\\"faEraser\\\" style=\\\"color:black\\\" (click)=\\\"onDeleteClick(garden.gardenId)\\\"></fa-icon>&nbsp;\\r\\n              <!-- <fa-icon [icon]=\\\"faSortUp\\\" style=\\\"color:black\\\" (click)=\\\"onAscendingSortClick(garden.gardenId)\\\"></fa-icon>&nbsp; -->\\r\\n              <!-- <fa-icon [icon]=\\\"faSortDown\\\" style=\\\"color:black\\\" (click)=\\\"onDescendingSortClick(garden.gardenId)\\\"></fa-icon> -->\\r\\n            </td>\\r\\n            <td>\\r\\n              {{garden.gardenName}}\\r\\n            </td>\\r\\n          </tr>\\r\\n        </table>\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n    <ng-template #noDataTemplate>\\r\\n      <div>\\r\\n        Loading...\\r\\n      </div>\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { GardenService } from './garden.service';\r\nimport { Garden } from './garden';\r\nimport {\r\n  faEdit,\r\n  faEraser,\r\n  faSortUp,\r\n  faSortDown\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n  selector: 'app-gardens',\r\n  templateUrl: './gardens.component.html',\r\n  styleUrls: ['./gardens.component.css']\r\n})\r\nexport class GardensComponent implements OnInit {\r\n  public errorMessage: string;\r\n  public gardens: Garden[];\r\n\r\n  faEdit = faEdit;\r\n  faEraser = faEraser;\r\n  faSortUp = faSortUp;\r\n  faSortDown = faSortDown;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private gardenService: GardenService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.getGardens();\r\n  }\r\n\r\n  getGardens(): void {\r\n    this.gardenService\r\n      .getGardens()\r\n      .subscribe(\r\n        response => (this.gardens = response),\r\n        error => (this.errorMessage = <any>error)\r\n      );\r\n  }\r\n\r\n  onEditClick(gardenId: number): void {\r\n    this.router.navigate([`/gardens/garden/${gardenId}`]);\r\n  }\r\n\r\n  onDeleteClick(gardenId: number): void {}\r\n\r\n  onAscendingSortClick(gardenId: number): void {}\r\n\r\n  onDescendingSortClick(gardenId: number): void {}\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  gardenTrackerServiceUrl: 'https://localhost:44374/'\r\n};\r\n\r\n// \"applicationUrl\": \"http://localhost:64015\",\r\n// \"sslPort\": 44374\r\n\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}